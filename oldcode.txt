/****
	 *
	 *
	 *
	 *
	 *
	 */

//	track * lastTrack;
//	int lastSequenceIndex = 0;
//
//	char * text = readFileToBuffer("merge.json");
//
//	if (!text) {
//		return;
//	}
//
//	json_t *root;
//	json_error_t error;
//
//	root = json_loads(text, 0, &error);
//	free(text);
//
//	if(!root) {
//		fprintf(stderr, "error: on line %d: %s\n", error.line, error.text);
//		return;
//	}
//
//	json_t * jsonTracks = json_object_get(root, "tracks");
//
//	if(!json_is_array(jsonTracks)) {
//		fprintf(stderr, "error: root is not an array\n");
//		json_decref(root);
//		return;
//	}
//
//	for(int i = 0; i < json_array_size(jsonTracks); i++) {
//		json_t * jsonTrack = json_array_get(jsonTracks, i);
//		if (!json_is_object(jsonTrack)) {
//			fprintf(stderr, "error: track %d is not an object\n", i + 1);
//			json_decref(root);
//			continue;
//		}
//
//		json_t * trackName = json_object_get(jsonTrack, "trackName");
//		if (!json_is_string(trackName)) {
//			fprintf(stderr, "error: trackName %d: is not a string\n", i + 1);
//			json_decref(root);
//			continue;
//		}
//
//		char * trackNameText = json_string_value(trackName);
//
//		track t1;
//		t1.index = nrOfTracks;
//		t1.tempo = 240;
//		t1.nrOfSeqs = 7;
//		t1.sequences = malloc(t1.nrOfSeqs * sizeof(sequence));
//		t1.totalNrOfSeqs = 32;
//		t1.forceStopSound = 0;
//		tracks[nrOfTracks] = t1;
//		nrOfTracks++;
//
//		lastTrack = &t1;
//		lastSequenceIndex = 0;
//
//		json_t * jsonSequences = json_object_get(jsonTrack, "sequences");
//		if (!json_is_array(jsonSequences)) {
//			fprintf(stderr, "error: commit %d: sequences is not an array\n", i + 1);
//			json_decref(root);
//			continue;
//		}
//
//		for (int j = 0; j < json_array_size(jsonSequences); j++) {
//			json_t * jsonSequence = json_array_get(jsonSequences, j);
//
//			if (!json_is_object(jsonSequence)) {
//				fprintf(stderr, "error: sequence data %d is not an object\n", j + 1);
//				json_decref(root);
//				continue;
//			}
//
//			json_t * seqStart = json_object_get(jsonSequence, "start");
//			if (!json_is_integer(seqStart)) {
//				fprintf(stderr, "error: commit %d: seqStart is not a int\n", j + 1);
//				json_decref(root);
//				continue;
//			}
//
//			int seqStartInt = json_integer_value(seqStart);
//			lastTrack->sequences[lastSequenceIndex].start = seqStartInt;
//
//			json_t * seqStop = json_object_get(jsonSequence, "stop");
//			if (!json_is_integer(seqStop)) {
//				fprintf(stderr, "error: commit %d: seqStop is not a int\n", j + 1);
//				json_decref(root);
//				continue;
//			}
//
//			int seqStopInt = json_integer_value(seqStop);
//			lastTrack->sequences[lastSequenceIndex].stop = seqStopInt;
//
//			json_t * seqInstr = json_object_get(jsonSequence, "instructions");
//			if (!json_is_string(seqInstr)) {
//				fprintf(stderr, "error: commit %d: seqInstr is not a string\n", j + 1);
//				json_decref(root);
//				continue;
//			}
//
//			char * seqInstrText = json_string_value(seqInstr);
//
//			lastTrack->sequences[lastSequenceIndex].instructions = malloc((1 + strlen(seqInstrText)) * sizeof(char));
//			strcpy (lastTrack->sequences[lastSequenceIndex].instructions, seqInstrText);
//
//			lastSequenceIndex++;
//		}
//
//	}

	/**
	 *char * string = readFileToBuffer("merge.txt");

	if (string) {

		int trackHeader = 1;
		int eventStart = 2;
		int eventStop = 3;
		int eventInstr = 4;
		int lastEvent = -1;

		size_t bufLen = strlen(string);
		size_t lastPosition = 0;
		track * lastTrack;
		int lastSequenceIndex = 0;

		for (int i = 0; i < bufLen; ++i) {

			if (string[i] == '\n' || i == (bufLen - 1)) {

				char * to = malloc((i - lastPosition + 1) * sizeof(char));
				to = substring(string, lastPosition, ((i == (bufLen - 1)) ? i - lastPosition + 1 : i - lastPosition));

				if (strstr(to, "@track")) {
					lastEvent = trackHeader;

				    track t1;
				    t1.index = nrOfTracks;
				    t1.tempo = 240;
				    t1.nrOfSeqs = 7;
				    t1.sequences = malloc(t1.nrOfSeqs * sizeof(sequence));
				    t1.totalNrOfSeqs = 32;
				    t1.forceStopSound = 1;
				   	jsonTracks[nrOfTracks] = t1;
				   	nrOfTracks++;

				   	lastTrack = &t1;
				   	lastSequenceIndex = 0;

				} else if (lastEvent == trackHeader || lastEvent == eventInstr) {
					lastEvent = eventStart;
					long found = strtol(&string[lastPosition], NULL, 0);

					lastTrack->sequences[lastSequenceIndex].start = (int)found;

				} else if (lastEvent == eventStart) {
					lastEvent = eventStop;
					long found = strtol(&string[lastPosition], NULL, 0);

					lastTrack->sequences[lastSequenceIndex].stop = (int) found;

				} else if (lastEvent == eventStop) {
					lastEvent = eventInstr;

					lastTrack->sequences[lastSequenceIndex].instructions = malloc((1 + strlen(to)) * sizeof(char));
					strcpy (lastTrack->sequences[lastSequenceIndex].instructions, to);

					lastSequenceIndex++;
				}

				free(to);
				lastPosition = i+1;
			}
		}

		free(string);
	}
	 *
	 *
	 *
	 */


//	    track t1;
//	    t1.index = nrOfTracks;
//	    t1.tempo = 240;
//	    t1.nrOfSeqs = 5;
//	    t1.sequences = (sequence *)malloc(t1.nrOfSeqs * sizeof(sequence));
//	    t1.totalNrOfSeqs = 32;
//
//	    for (int var = 0; var < t1.nrOfSeqs; ++var) {
//			t1.sequences[var].start = var;
//			t1.sequences[var].stop = var + 1;
//	    	t1.sequences[var].instructions = "sounds/hat.wav";
//		}
//
//	    t1.forceStopSound = 1;
//	    tracks[nrOfTracks] = t1;
//	    nrOfTracks++;

	//    track t2;
	//    t2.index = nrOfTracks;
	//    t2.tempo = 240;
	//    t2.nrOfSeqs = 32;
	//    t2.instructions = "sounds/shaker.wav";
	//    int points2[64] = {0,1, 1,2, 2,3, 3,4, 4,5, 5,6, 6,7, 7,8, 8,9, 9,10, 10,11, 11,12, 12,13, 13,14, 14,15, 15,16, 16,17, 17,18, 18,19, 19,20, 20,21, 21,22, 22,23, 23,24, 24,25, 25,26, 26,27, 27,28, 28,29, 29,30, 30,31, 31,32};
	//    t2.points = points2;
	//    t2.nrOfPoints = sizeof(points2) / sizeof(int);
	//    t2.forceStopSound = 0;
	//    tracks[nrOfTracks] = t2;
	//    nrOfTracks++;
	//
	//    track t3;
	//    t3.index = nrOfTracks;
	//    t3.tempo = 240;
	//    t3.nrOfSeqs = 32;
	//    t3.instructions = "sounds/tamb.wav";
	//    int points3[8] = {4, 12,12, 20,20, 28,28, 32};
	//    t3.points = points3;
	//    t3.nrOfPoints = sizeof(points3) / sizeof(int);
	//    t3.forceStopSound = 0;
	//    tracks[nrOfTracks] = t3;
	//    nrOfTracks++;
	//
	//    track t4;
	//    t4.index = nrOfTracks;
	//    t4.tempo = 240;
	//    t4.nrOfSeqs = 32;
	//    t4.instructions = "sounds/clap.wav";
	//    int points4[14] = {4,12, 12,20, 20,21, 21,23, 23,25, 25,28, 28,32};
	//    t4.points = points4;
	//    t4.nrOfPoints = sizeof(points4) / sizeof(int);
	//    t4.forceStopSound = 0;
	//    tracks[nrOfTracks] = t4;
	//    nrOfTracks++;
	//
	//    track t5;
	//    t5.index = nrOfTracks;
	//    t5.tempo = 240;
	//    t5.nrOfSeqs = 32;
	//    t5.instructions = "sounds/organic2.wav";
	//    int points5[10] = {2,10, 10,18, 18,21, 21,26, 26,32};
	//    t5.points = points5;
	//    t5.nrOfPoints = sizeof(points5) / sizeof(int);
	//    t5.forceStopSound = 0;
	//    tracks[nrOfTracks] = t5;
	//    nrOfTracks++;
	//
	//    track t6;
	//    t6.index = nrOfTracks;
	//    t6.tempo = 240;
	//    t6.nrOfSeqs = 32;
	//    t6.instructions = "sounds/organic1.wav";
	//    int points6[16] = {1,7, 7,9, 9,15, 15,17, 17,23, 23,25, 25,31, 31,32};
	//    t6.points = points6;
	//    t6.nrOfPoints = sizeof(points6) / sizeof(int);
	//    t6.forceStopSound = 1;
	//    tracks[nrOfTracks] = t6;
	//    nrOfTracks++;
	//
	//    track t7;
	//    t7.index = nrOfTracks;
	//    t7.tempo = 240;
	//    t7.nrOfSeqs = 32;
	//    t7.instructions = "sounds/tom.wav";
	//    int points7[12] = {1,3, 3,6, 6,17, 17,19, 19,22, 22,32};
	//    t7.points = points7;
	//    t7.nrOfPoints = sizeof(points7) / sizeof(int);
	//    t7.forceStopSound = 1;
	//    tracks[nrOfTracks] = t7;
	//    nrOfTracks++;
	//
	//    track t8;
	//    t8.index = nrOfTracks;
	//    t8.tempo = 240;
	//    t8.nrOfSeqs = 32;
	//    t8.instructions = "sounds/kick.wav";
	//    int points8[16] = {0,4, 4,8, 8,12, 12,16, 16,20, 20,24, 24,28, 28,32};
	//    t8.points = points8;
	//    t8.nrOfPoints = sizeof(points8) / sizeof(int);
	//    t8.forceStopSound = 1;
	//    tracks[nrOfTracks] = t8;
	//    nrOfTracks++;